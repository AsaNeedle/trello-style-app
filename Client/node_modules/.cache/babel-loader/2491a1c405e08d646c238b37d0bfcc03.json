{"ast":null,"code":"var _jsxFileName = \"/Users/asaneedle/Documents/Coding Projects/my-app/Client/src/Home.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport isEquivalent from './utils/isequivalent';\nimport './Home.css';\nimport TestPage from './TestPage.js';\n\nfunction Home() {\n  const [isPersist, setIsPersist] = useState(false);\n  const [dropColumn, setDropColumn] = useState(false);\n  const [tickets, setTickets] = useState([{\n    id: 0,\n    content: \"\",\n    done: false\n  }, {\n    id: 1,\n    content: \"\",\n    done: false\n  }, {\n    id: 2,\n    content: \"\",\n    done: true\n  }, {\n    id: 3,\n    content: \"\",\n    done: false\n  }, {\n    id: 4,\n    content: \"\",\n    done: true\n  }, {\n    id: 5,\n    content: \"\",\n    done: false\n  }, {\n    id: 6,\n    content: \"\",\n    done: true\n  }, {\n    id: 7,\n    content: \"\",\n    done: false\n  }, {\n    id: 8,\n    content: \"\",\n    done: true\n  }, {\n    id: 9,\n    content: \"\",\n    done: false\n  }, {\n    id: 10,\n    content: \"\",\n    done: false\n  }, {\n    id: 11,\n    content: \"\",\n    done: true\n  }]);\n  const [columns, setColumns] = useState([{\n    id: 0,\n    title: \"Languages to learn\",\n    tickets: []\n  }, {\n    id: 1,\n    title: \"Boroughs to explore\",\n    tickets: []\n  }, {\n    id: 2,\n    title: \"Cats to pet\",\n    tickets: []\n  }]); // This function fetches an array of tickets from the backend\n  // and sets the value of tickets to it\n\n  useEffect(() => {\n    async function effectFunction() {\n      const response = await fetch('/tickets');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message); // need to find a better way to do this \n\n      setTickets(state => state.concat(body));\n      setTickets(state => state.slice(12));\n      console.log(body);\n    }\n\n    ;\n    effectFunction();\n  }, []); // this function fetches an array of tickets, \n  // with two values (id, columnid) from the backend\n  // and sets the value of columns to it \n\n  useEffect(() => {\n    async function effectFunction2() {\n      const response = await fetch('/columns');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      let newColumns = [];\n\n      for (let i in body) {\n        let curItem = body[i];\n        let columnId = curItem.columnid;\n        let ticketId = curItem.id;\n\n        let columnIds = () => newColumns.map(x => x.id);\n\n        if (columnIds().includes(columnId)) {\n          newColumns[columnId].tickets.push(ticketId);\n        } else {\n          newColumns.push({\n            id: columnId,\n            title: columns[columnId].title,\n            tickets: [ticketId]\n          });\n        }\n      }\n\n      setColumns(state => state.concat(newColumns));\n      setColumns(state => state.slice(3));\n    }\n\n    ;\n    effectFunction2();\n  }, []); // function DisplayInput (props) {\n  //   const displayInput = props.displayInput\n  //   if (displayInput){\n  //     return <TicketForm />\n  //   } else {\n  //     return null\n  //   }\n  // }\n\n  const updatePersistData = data => {\n    return;\n    localStorage.setItem('myData', JSON.stringify(data));\n  };\n\n  const dragStart = e => {\n    e.dataTransfer.setData(\"TicketId\", e.target.id);\n  };\n\n  const dragging = e => {\n    return;\n  };\n\n  const allowDrop = e => {\n    e.preventDefault(); // if (e === dropColumn){\n    //   return\n    // }\n    // const originId = e.dataTransfer.getData(\"OriginId\")\n    // if (e.target.getAttribute(\"class\") === \"column\"){\n    //   if (e.target.id !== originId){\n    //     setDropColumn(e)\n    //   } else {\n    //     setDropColumn(false)\n    //   }\n    // }\n  };\n\n  const drop = e => {\n    e.preventDefault();\n    const ticketId = parseInt(e.dataTransfer.getData(\"TicketId\"));\n    const ticketName = tickets[ticketId].content;\n    const originId = columns.find(x => x.tickets.includes(ticketId))[\"id\"];\n\n    if (e.target.getAttribute(\"class\") === \"column\" && e.target.id != originId) {\n      let newColumns = moveTicket(e.target.id, ticketId, ticketName, columns);\n      setColumns(newColumns);\n      updatePersistData(newColumns);\n    }\n  };\n\n  const moveTicket = (colId, ticketId, val, columns) => {\n    const newColumns = columns.map(col => {\n      // Removes ticket from origin\n      if (col.tickets.includes(ticketId)) {\n        let srcCol = {\n          id: col.id,\n          title: col.title,\n          tickets: col.tickets.filter(x => x != ticketId)\n        };\n        return srcCol;\n      } // Adds ticket to destination\n\n\n      if (col.id == colId) {\n        const destCol = {\n          id: col.id,\n          title: col.title,\n          tickets: [...col.tickets, ticketId]\n        };\n        return destCol;\n      } else {\n        return col;\n      }\n    });\n    return newColumns;\n  };\n\n  async function addTicket(id, val, columns, tickets) {\n    const newTicketId = () => tickets.length;\n\n    const response = fetch('/tickets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([newTicketId, val, false])\n    });\n    const body = await response;\n    const bodytext = await body.text();\n    return [columns, tickets];\n  }\n\n  const removeColumn = id => {\n    const newColumns = columns.filter(column => column.id !== id);\n    setColumns(newColumns);\n    updatePersistData(newColumns);\n  };\n\n  class Ticket extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.toggleDone = () => {\n        this.setState({\n          done: !this.state.done\n        });\n      };\n\n      this.state = {\n        text: props.text,\n        index: props.index,\n        id: props.id,\n        done: false\n      };\n    }\n\n    render() {\n      return React.createElement(\"div\", {\n        className: \"list-group-item\",\n        name: this.props.column,\n        id: this.state.id,\n        index: this.state.index,\n        draggable: \"true\",\n        onDragStart: dragStart,\n        onDrag: dragging,\n        style: this.state.done ? {\n          textDecoration: \"line-through\"\n        } : {},\n        onClick: this.toggleDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"\\xa0\" + this.state.text);\n    }\n\n  }\n\n  class TicketColumn extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        items: props.items,\n        title: props.title,\n        id: props.id\n      };\n    }\n\n    render() {\n      return React.createElement(\"div\", {\n        className: \"column\",\n        id: this.state.id,\n        onDrop: drop,\n        onDragOver: allowDrop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"panel-heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"\\xa0\" + this.state.title + \"\\xa0\\xa0\\xa0\"), React.createElement(Button, {\n        type: \"button\",\n        className: \"pull-right\",\n        className: \"btn btn-danger btn-xs\",\n        onClick: () => {\n          removeColumn(this.state.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"X\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, this.state.items.map((item, i) => {\n        return React.createElement(Ticket, {\n          key: i,\n          column: this.state.id,\n          index: item.id,\n          done: item.done,\n          id: item.id,\n          text: item.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        });\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"^^^Drag here to add!^^^\"), React.createElement(TicketForm, {\n        id: this.state.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  class Workspace extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        columns: props.columns,\n        tickets: props.tickets\n      };\n    }\n\n    componentDidMount() {\n      const persistedData = JSON.parse(localStorage.getItem('myData' || null));\n\n      if (persistedData && !isPersist & !isEquivalent(columns, persistedData)) {\n        setColumns(persistedData);\n        setIsPersist(true);\n      }\n    }\n\n    render() {\n      const {\n        columns\n      } = this.props;\n      const {\n        tickets\n      } = this.props;\n      return React.createElement(\"div\", {\n        className: \"flex-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, columns.map((column, i) => {\n        return React.createElement(TicketColumn, {\n          key: i,\n          items: column.tickets.map(id => tickets[id]),\n          title: column.title,\n          id: column.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        });\n      }), React.createElement(ColumnForm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  class TicketForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: '',\n        id: props.id\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n\n      if (this.state.value !== \"\") {\n        console.log('submitting..');\n        const res = addTicket(this.state.id, this.state.value, columns, tickets); // const newColumns = res[0]\n        // const newTickets = res[1]\n        // setColumns(newColumns)\n        // setTickets(newTickets)\n        // updatePersistData(newColumns)\n      }\n    }\n\n    render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"tkt-input\",\n        type: \"text\",\n        placeholder: \"Add new dream :)\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"input-tkt-btn\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  class ColumnForm extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: columns.length,\n        value: ''\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n\n    handleSubmit(event) {\n      if (this.state.value !== \"\") {\n        const newColumns = [...columns, {\n          id: this.state.id,\n          title: this.state.value,\n          tickets: []\n        }];\n        setColumns(newColumns);\n      }\n\n      event.preventDefault();\n    }\n\n    render() {\n      return React.createElement(\"form\", {\n        className: \"column\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"col-input\",\n        type: \"text\",\n        placeholder: \"Add new dream list\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"input-col-btn\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"display-1\",\n    id: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }, \"Hacker Dreams\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, \"Don't let your dreams be dreams, hackers.\"), React.createElement(Workspace, {\n    columns: columns,\n    tickets: tickets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }), React.createElement(TestPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/asaneedle/Documents/Coding Projects/my-app/Client/src/Home.js"],"names":["React","useState","useEffect","Button","isEquivalent","TestPage","Home","isPersist","setIsPersist","dropColumn","setDropColumn","tickets","setTickets","id","content","done","columns","setColumns","title","effectFunction","response","fetch","body","json","status","Error","message","state","concat","slice","console","log","effectFunction2","newColumns","i","curItem","columnId","columnid","ticketId","columnIds","map","x","includes","push","updatePersistData","data","localStorage","setItem","JSON","stringify","dragStart","e","dataTransfer","setData","target","dragging","allowDrop","preventDefault","drop","parseInt","getData","ticketName","originId","find","getAttribute","moveTicket","colId","val","col","srcCol","filter","destCol","addTicket","newTicketId","length","method","headers","bodytext","text","removeColumn","column","Ticket","Component","constructor","props","toggleDone","setState","index","render","textDecoration","TicketColumn","items","item","Workspace","componentDidMount","persistedData","parse","getItem","TicketForm","value","handleChange","bind","handleSubmit","event","res","ColumnForm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport isEquivalent from './utils/isequivalent'\nimport './Home.css';\nimport TestPage from './TestPage.js'\n\nfunction Home() {\n  const [isPersist, setIsPersist] = useState(false)\n  const [dropColumn, setDropColumn] = useState(false)\n  const [tickets, setTickets] = useState(\n    [\n    {id: 0, content: \"\", done: false},\n    {id: 1, content: \"\", done: false},\n    {id: 2, content: \"\", done: true},\n    {id: 3, content: \"\", done: false},\n    {id: 4, content: \"\", done: true},\n    {id: 5, content: \"\", done: false},\n    {id: 6, content: \"\", done: true},\n    {id: 7, content: \"\", done: false},\n    {id: 8, content: \"\", done: true},\n    {id: 9, content: \"\", done: false},\n    {id: 10, content: \"\", done: false},\n    {id: 11, content: \"\", done: true}\n  ]\n  )\n\n  const [columns, setColumns] = useState([\n    {\n      id: 0,\n      title: \"Languages to learn\",\n      tickets: []\n    },\n    {\n      id: 1,\n      title: \"Boroughs to explore\",\n      tickets: []\n    },\n    {\n      id: 2,\n      title: \"Cats to pet\",\n      tickets: []\n    }\n  ])\n\n  // This function fetches an array of tickets from the backend\n  // and sets the value of tickets to it\n  useEffect(() => {\n    async function effectFunction(){\n      const response = await fetch('/tickets');\n      const body = await response.json()\n      if (response.status !== 200) throw Error(body.message);\n      // need to find a better way to do this \n      setTickets((state) => state.concat(body))\n      setTickets((state) => state.slice(12))\n      console.log(body)\n    };\n    effectFunction() \n  }, []);\n\n  // this function fetches an array of tickets, \n  // with two values (id, columnid) from the backend\n  // and sets the value of columns to it \n  useEffect(() => {\n    async function effectFunction2(){\n      const response = await fetch('/columns');\n      const body = await response.json()\n      if (response.status !== 200) throw Error(body.message);\n      let newColumns = []\n      for (let i in body){\n        let curItem = body[i]\n        let columnId = curItem.columnid\n        let ticketId = curItem.id\n        let columnIds = () => newColumns.map(x => x.id)\n        if (columnIds().includes(columnId)){\n          newColumns[columnId].tickets.push(ticketId)\n        } else {\n          newColumns.push({\n            id: columnId,\n            title: columns[columnId].title,\n            tickets: [ticketId]\n          })\n        }\n       }\n      setColumns((state) => state.concat(newColumns))\n      setColumns((state) => state.slice(3))\n    };\n    effectFunction2() \n  }, []);\n\n  // function DisplayInput (props) {\n  //   const displayInput = props.displayInput\n  //   if (displayInput){\n  //     return <TicketForm />\n  //   } else {\n  //     return null\n  //   }\n  // }\n\n\n  const updatePersistData = (data) => {\n    return\n    localStorage.setItem('myData', JSON.stringify(data))\n  }\n\n  const dragStart = (e) => {\n    e.dataTransfer.setData(\"TicketId\", e.target.id)\n  }\n  const dragging = (e) => {\n    return\n  }\n  const allowDrop = (e) => { \n    e.preventDefault();\n    // if (e === dropColumn){\n    //   return\n    // }\n    // const originId = e.dataTransfer.getData(\"OriginId\")\n    // if (e.target.getAttribute(\"class\") === \"column\"){\n    //   if (e.target.id !== originId){\n    //     setDropColumn(e)\n    //   } else {\n    //     setDropColumn(false)\n    //   }\n    // }\n  }\n\n  const drop = (e) => {\n    e.preventDefault();\n    const ticketId = parseInt(e.dataTransfer.getData(\"TicketId\"))\n    const ticketName = tickets[ticketId].content\n    const originId = columns.find(x => x.tickets.includes(ticketId))[\"id\"]\n    if (e.target.getAttribute(\"class\") === \"column\" && e.target.id != originId){ \n      let newColumns = moveTicket(e.target.id, ticketId, ticketName, columns)\n      setColumns(newColumns)\n      updatePersistData(newColumns)\n    }\n  }\n\n  const moveTicket = (colId, ticketId, val, columns) => {\n    const newColumns = columns.map((col) => {\n      // Removes ticket from origin\n      if (col.tickets.includes(ticketId)){\n        let srcCol = {\n          id: col.id,\n          title: col.title,\n          tickets: col.tickets.filter(x => x != ticketId)\n        }\n        return srcCol\n      }\n      // Adds ticket to destination\n      if (col.id == colId) {\n        const destCol = {\n          id: col.id,\n          title: col.title, \n          tickets: [...col.tickets, ticketId]\n        }\n        return destCol\n      } else {\n        return col\n      }\n    });\n    return newColumns\n  }\n\n  async function addTicket(id, val, columns, tickets) {\n    const newTicketId = () => tickets.length\n    const response = fetch('/tickets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify([ newTicketId, val, false ])\n    })\n    const body = await response;\n    const bodytext = await body.text()\n    return [columns, tickets]\n  }\n\n  const removeColumn = (id) => {\n    const newColumns = columns.filter((column) => column.id !== id);\n    setColumns(newColumns)\n    updatePersistData(newColumns)\n  }\n\n  class Ticket extends React.Component {\n    constructor(props){\n      super(props)\n      this.state={\n        text: props.text,\n        index: props.index,\n        id: props.id,\n        done: false\n      }\n    }\n\n    toggleDone = () => {\n      this.setState({done: !this.state.done}) \n    }\n\n    render(){\n      return (\n        <div className=\"list-group-item\"\n             name={this.props.column}\n             id={this.state.id}\n             index={this.state.index}\n             draggable=\"true\"\n             onDragStart={dragStart}\n             onDrag={dragging}\n             style={this.state.done ? { textDecoration: \"line-through\" } : {}} onClick={this.toggleDone}>\n          {\"\\xa0\" + this.state.text} \n        </div>\n      )\n    }\n  }\n\n  class TicketColumn extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {items: props.items, title: props.title, id: props.id}\n    }\n    render(){\n      return (\n        \n        <div className=\"column\"\n             id={this.state.id}\n             onDrop={drop}\n             onDragOver={allowDrop}>\n        <div className=\"panel\">\n        <div className=\"panel-heading\">\n          <b>{\"\\xa0\" + this.state.title + \"\\xa0\\xa0\\xa0\"}</b>\n          <Button type=\"button\" className=\"pull-right\" className=\"btn btn-danger btn-xs\" onClick={() => {removeColumn(this.state.id)}}>X</Button>\n        </div>\n        <br/>\n        <div className=\"list-group\">\n        {this.state.items.map((item, i) => { \n          return <Ticket key={i} column={this.state.id} \n                                 index={item.id} \n                                 done={item.done} \n                                 id={item.id}\n                                 text={item.content}/>\n        })}\n        </div>\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <div>^^^Drag here to add!^^^</div>\n        <TicketForm id={this.state.id}/>\n        </div>\n      )\n    }\n  }\n\n  class Workspace extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {columns: props.columns, tickets: props.tickets}\n    }\n    componentDidMount(){\n      const persistedData = JSON.parse(localStorage.getItem('myData' || null))\n      if (persistedData && !isPersist & !isEquivalent(columns, persistedData)){\n        setColumns(persistedData)\n        setIsPersist(true)\n      }\n    }\n    render(){\n      const { columns } = this.props\n      const { tickets } = this.props\n      return(\n        <div className=\"flex-container\">\n        { columns.map((column, i) => {\n            return <TicketColumn key={i} \n                                 items={column.tickets.map((id) => tickets[id])} \n                                 title={column.title} \n                                 id={column.id}/>\n          })\n        }\n        <ColumnForm />\n        </div>\n      )\n    }\n  }\n\n  class TicketForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {value: '', id: props.id}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      event.preventDefault();\n      if (this.state.value !== \"\"){\n        console.log('submitting..')\n        const res = addTicket(this.state.id, this.state.value, columns, tickets)\n\n        // const newColumns = res[0]\n        // const newTickets = res[1]\n        // setColumns(newColumns)\n        // setTickets(newTickets)\n        // updatePersistData(newColumns)\n      } \n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"tkt-input\" type=\"text\" placeholder=\"Add new dream :)\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-tkt-btn\"type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  class ColumnForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {id: columns.length, value: ''}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      if (this.state.value !== \"\"){\n        const newColumns = [...columns, {\n          id: this.state.id,\n          title: this.state.value,\n          tickets: []\n        }]\n        setColumns(newColumns);\n      }\n      event.preventDefault();\n    }\n\n    render() {\n      return (\n        <form className=\"column\" onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"col-input\" type=\"text\" placeholder=\"Add new dream list\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-col-btn\" type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n  return (\n    <div className=\"container\">\n      <header className=\"display-1\" id=\"title\" >Hacker Dreams</header>\n      <p className=\"lead\">Don't let your dreams be dreams, hackers.</p>\n      <Workspace columns={columns} tickets={tickets}/>\n      <TestPage />\n    </div> )\n}\n\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}