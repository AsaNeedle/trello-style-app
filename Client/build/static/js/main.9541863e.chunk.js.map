{"version":3,"sources":["utils/isequivalent.js","TestPage.js","Home.js","About.js","App.js","serviceWorker.js","index.js"],"names":["isEquivalent","a","b","aProps","Object","getOwnPropertyNames","bProps","length","i","propName","TestPage","state","response","post","responseToPost","callApi","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","console","log","setState","this","then","res","express","catch","err","onSubmit","type","value","onChange","target","Component","Home","useState","isPersist","setIsPersist","id","content","done","tickets","setTickets","title","columns","setColumns","useEffect","effectFunctionTickets","effectFunctionColumns","dragStart","dataTransfer","setData","dragging","allowDrop","drop","ticketId","parseInt","getData","ticketName","originId","find","x","includes","getAttribute","newColumns","moveTicket","colId","val","map","col","filter","columnId","bodytext","Ticket","props","toggleDone","index","className","name","column","draggable","onDragStart","onDrag","style","textDecoration","onClick","React","TicketColumn","items","onDrop","onDragOver","Button","columnid","removeColumn","item","key","TicketForm","Workspace","persistedData","parse","localStorage","getItem","t","ColumnForm","handleChange","bind","event","addTicket","placeholder","addColumn","About","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9541863e.chunk.js","sourcesContent":["export function isEquivalent(a, b) {\n  const aProps = Object.getOwnPropertyNames(a);\n  const bProps = Object.getOwnPropertyNames(b);\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n  for (let i = 0; i < aProps.length; i++) {\n    const propName = aProps[i];\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default isEquivalent","import React,  { Component } from 'react';\n\nclass TestPage extends Component{\nstate = {\n  response: '',\n  post: '',\n  responseToPost: '',\n};\n\ncomponentDidMount(){\n  this.callApi()\n    .then(res => this.setState({response: res.express}))\n    .catch(err => console.log(err));\n}\n\ncallApi = async () => {\n  const response = await fetch('/api/hello');\n  const body = await response.json()\n  if (response.status !== 200) throw Error(body.message);\n  return body\n};\n\nhandleSubmit = async e => {\n  e.preventDefault();\n  const response = await fetch('/api/world', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ post:this.state.post })\n  });\n  const body = await response.text();\n  console.log(body)\n\n  this.setState({responseToPost: body});\n};\nrender(){\n  return (\n    <div>\n    <p>{this.state.response}</p>\n    <form onSubmit={this.handleSubmit}>\n      <p>\n        <strong>Post to Server</strong>\n      </p>\n      <input\n        type=\"text\"\n        value={this.state.post}\n        onChange={e => this.setState({ post: e.target.value })}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n    <p>{this.state.responseToPost}</p>\n    </div>\n  )}\n}\n\nexport default TestPage","import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport isEquivalent from './utils/isequivalent'\nimport './Home.css';\nimport TestPage from './TestPage.js'\n\nfunction Home() {\n  const [isPersist, setIsPersist] = useState(false)\n  const [dropColumn, setDropColumn] = useState(false)\n  const [tickets, setTickets] = useState(\n    [\n    {id: 0, content: \"\", done: false},\n    {id: 1, content: \"\", done: false},\n    {id: 2, content: \"\", done: true},\n    {id: 3, content: \"\", done: false},\n    {id: 4, content: \"\", done: true},\n    {id: 5, content: \"\", done: false},\n    {id: 6, content: \"\", done: true},\n    {id: 7, content: \"\", done: false},\n    {id: 8, content: \"\", done: true},\n    {id: 9, content: \"\", done: false},\n    {id: 10, content: \"\", done: false},\n    {id: 11, content: \"\", done: true},\n    {id: 12, content: \"\", done: true},\n    {id: 13, content: \"\", done: true},\n    {id: 14, content: \"\", done: true},\n    {id: 15, content: \"\", done: true},\n    {id: 16, content: \"\", done: true}\n  ]\n  )\n\n  const [columns, setColumns] = useState([\n    {\n      id: 0,\n      title: \"\",\n      tickets: []\n    },\n    {\n      id: 1,\n      title: \"\",\n      tickets: []\n    },\n    {\n      id: 2,\n      title: \"\",\n      tickets: []\n    },\n    {\n      id: 3,\n      title: \"More tickets\",\n      tickets: []\n    }\n  ])\n\n  useEffect(() => {\n    async function effectFunctionTickets(){\n      const response = await fetch('/tickets');\n      const body = await response.json()\n      if (response.status !== 200) throw Error(body.message);\n      setTickets(body)\n    };\n    effectFunctionTickets() \n  }, []);\n\n  useEffect(() => {\n    async function effectFunctionColumns(){\n      const response = await fetch('/columns');\n      const body = await response.json()\n      if (response.status !== 200) throw Error(body.message);\n      const newColumns = body\n      setColumns(newColumns)\n    };\n    effectFunctionColumns() \n  }, []);\n  const updatePersistData = (data) => {\n    return\n    localStorage.setItem('myData', JSON.stringify(data))\n  }\n\n  const dragStart = (e) => {\n    e.dataTransfer.setData(\"TicketId\", e.target.id)\n  }\n  const dragging = (e) => {\n    return\n  }\n  const allowDrop = (e) => { \n    e.preventDefault();\n    // if (e === dropColumn){\n    //   return\n    // }\n    // const originId = e.dataTransfer.getData(\"OriginId\")\n    // if (e.target.getAttribute(\"class\") === \"column\"){\n    //   if (e.target.id !== originId){\n    //     setDropColumn(e)\n    //   } else {\n    //     setDropColumn(false)\n    //   }\n    // }\n  }\n\n  const drop = (e) => {\n    e.preventDefault();\n    const ticketId = parseInt(e.dataTransfer.getData(\"TicketId\"))\n    const ticketName = tickets[ticketId].content\n    const originId = columns.find(x => x.tickets.includes(ticketId))[\"id\"]\n    if (e.target.getAttribute(\"class\") === \"column\" && e.target.id != originId){ \n      let newColumns = moveTicket(e.target.id, ticketId, ticketName, columns)\n      setColumns(newColumns)\n      updatePersistData(newColumns)\n    }\n  }\n\n  const moveTicket = (colId, ticketId, val, columns) => {\n    const newColumns = columns.map((col) => {\n      // Removes ticket from origin\n      if (col.tickets.includes(ticketId)){\n        let srcCol = {\n          id: col.id,\n          title: col.title,\n          tickets: col.tickets.filter(x => x != ticketId)\n        }\n        return srcCol\n      }\n      // Adds ticket to destination\n      if (col.id == colId) {\n        const destCol = {\n          id: col.id,\n          title: col.title, \n          tickets: [...col.tickets, ticketId]\n        }\n        return destCol\n      } else {\n        return col\n      }\n    });\n    return newColumns\n  }\n\n  async function updateTicket(ticketid, columnid){\n    const response = fetch('/columns', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      parameters: {\n        columndid: JSON.stringify([columnid]),\n        ticketid: JSON.stringify([ticketid])\n      }\n    })\n    const body = await response;\n    const bodytext = await body.text()\n    console.log(bodytext)\n  }\n\n  async function addTicket(columnId, val) {\n    const response = fetch('/tickets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify([ val, false, columnId])\n    })\n    const body = await response;\n    const bodytext = await body.text()\n    console.log(bodytext)\n  }\n  \n  async function addColumn(title){\n    console.log(title)\n    const response = fetch('/columns', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify([title])\n    })\n    \n    const body = await response;\n    const bodytext = await body.text()\n    console.log(bodytext)\n  }\n\n  const removeColumn = (id) => {\n    const newColumns = columns.filter((column) => column.columnid !== id);\n    setColumns(newColumns)\n    updatePersistData(newColumns)\n  }\n\n  class Ticket extends React.Component {\n    constructor(props){\n      super(props)\n      this.state={\n        text: props.text,\n        index: props.index,\n        id: props.id,\n        done: false\n      }\n    }\n\n    toggleDone = () => {\n      this.setState({done: !this.state.done}) \n    }\n\n    render(){\n      return (\n        <div className=\"list-group-item\"\n             name={this.props.column}\n             id={this.state.id}\n             index={this.state.index}\n             draggable=\"true\"\n             onDragStart={dragStart}\n             onDrag={dragging}\n             style={this.state.done ? { textDecoration: \"line-through\" } : {}} onClick={this.toggleDone}>\n          {\"\\xa0\" + this.state.text} \n        </div>\n      )\n    }\n  }\n\n  class TicketColumn extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {items: props.items, title: props.title, id: props.id}\n    }\n    \n    render(){\n      return (\n        <div className=\"column\"\n             id={this.state.id}\n             onDrop={drop}\n             onDragOver={allowDrop}>\n        <div className=\"panel\">\n        <div className=\"panel-heading\">\n          <b>{\"\\xa0\" + this.state.title + \"\\xa0\\xa0\\xa0\"}</b>\n          <Button type=\"button\" className=\"pull-right\" className=\"btn btn-danger btn-xs\" onClick={() => {removeColumn(this.state.id)}}>X</Button>\n        </div>\n        <br/>\n        <div className=\"list-group\">           \n        {this.state.items.map((item, i) => { \n          console.log(item)\n          return <Ticket key={i} column={this.state.id} \n                                 index={item.id} \n                                 done={item.done} \n                                 id={item.id}\n                                 text={item.content}/>\n        })}\n        </div>\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <div>^^^Drag here to add!^^^</div>\n        <TicketForm id={this.state.id}/>\n        </div>\n      )\n    }\n  }\n\n  class Workspace extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {columns: props.columns, tickets: props.tickets}\n    }\n    componentDidMount(){\n      const persistedData = JSON.parse(localStorage.getItem('myData' || null))\n      if (persistedData && !isPersist & !isEquivalent(columns, persistedData)){\n        setColumns(persistedData)\n        setIsPersist(true)\n      }\n    }\n    render(){\n      const { columns } = this.props\n      const { tickets } = this.props\n      console.log(tickets)\n      return(\n        <div className=\"flex-container\">\n        { columns.map((column, i) => {\n            return <TicketColumn key={i} \n                                 items={tickets.filter((t) => t.columnid == column.columnid)} \n                                 title={column.title} \n                                 id={column.columnid}/>\n          })\n        }\n        <ColumnForm />\n        </div>\n      )\n    }\n  }\n\n  class TicketForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {value: '', id: props.id}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      event.preventDefault();\n      if (this.state.value !== \"\"){\n        const res = addTicket(this.state.id, this.state.value)\n\n        // const newColumns = res[0]\n        // const newTickets = res[1]\n        // setColumns(newColumns)\n        // setTickets(newTickets)\n        // updatePersistData(newColumns)\n      } \n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"tkt-input\" type=\"text\" placeholder=\"Add new dream :)\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-tkt-btn\"type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n\n  class ColumnForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {id: columns.length, value: ''}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      addColumn(this.state.value);\n      event.preventDefault();\n    }\n  \n\n    render() {\n      return (\n        <form className=\"column\" onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"col-input\" type=\"text\" placeholder=\"Add new dream list\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-col-btn\" type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n  return (\n    <div className=\"container\">\n      <header className=\"display-1\" id=\"title\" >Hacker Dreams</header>\n      <p className=\"lead\">Don't let your dreams be dreams, hackers.</p>\n      <Workspace columns={columns} tickets={tickets}/>\n      <TestPage />\n    </div> )\n}\n\n\nexport default Home;","import React from 'react';\n\nfunction About(){\n  return (\n    <div className=\"container\">\n      <header className=\"display-1\" id=\"title\" >Hacker Dreams</header>\n      <p className=\"lead\">Don't let your dreams be dreams, hackers.</p>\n      <div>This is an app I made to practice art!</div>\n   </div>)\n}\n\nexport default About;","import React, { useState, Component } from 'react';\nimport Home from './Home.js'\nimport About from './About.js'\nimport TestPage from './TestPage.js'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App(){\n  return(\n  <Router>\n    <Switch>\n    <Route path='/TestPage'>\n      <TestPage />\n    </Route>\n    <Route path=\"/Home\">\n      <Home />\n    </Route>\n    <Route path=\"/about\">\n      <About />\n    </Route>\n    </Switch>\n  </Router>\n  )}\n        \n\n        \n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}