{"version":3,"sources":["utils/isequivalent.js","App.js","serviceWorker.js","index.js"],"names":["isEquivalent","a","b","aProps","Object","getOwnPropertyNames","bProps","length","i","propName","App","useState","isPersist","setIsPersist","id","content","done","tickets","setTickets","title","columns","setColumns","dragStart","e","dataTransfer","setData","target","name","index","dragging","allowDrop","preventDefault","drop","console","log","ticketName","getData","originId","tId","colTickets","t","curTicket","ticketId","getAttribute","newColumns","moveTicket","colId","val","map","col","includes","filter","x","Ticket","props","toggleDone","setState","state","text","className","this","column","draggable","onDragStart","onDrag","style","textDecoration","onClick","React","Component","TicketColumn","items","onDrop","onDragOver","removeColumn","item","key","TicketForm","Workspace","persistedData","JSON","parse","localStorage","getItem","ColumnForm","value","handleChange","bind","handleSubmit","event","res","newTicketId","newTickets","addTicket","onSubmit","type","placeholder","onChange","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eeb9f5b7.chunk.js","sourcesContent":["export function isEquivalent(a, b) {\n  const aProps = Object.getOwnPropertyNames(a);\n  const bProps = Object.getOwnPropertyNames(b);\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n  for (let i = 0; i < aProps.length; i++) {\n    const propName = aProps[i];\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEquivalent","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport isEquivalent from './utils/isequivalent'\nimport './App.css';\n\nfunction App() {\n  const [isPersist, setIsPersist] = useState(false)\n  const [dropColumn, setDropColumn] = useState(false)\n  const [tickets, setTickets] = useState([\n    {id: 0, content: \"Python\", done: false},\n    {id: 1, content: \"Ruby\", done: false},\n    {id: 2, content: \"JavaScript\", done: true},\n    {id: 3, content: \"Haskell\", done: false},\n    {id: 4, content: \"Staten Island\", done: true},\n    {id: 5, content: \"Brooklyn\", done: false},\n    {id: 6, content: \"Queens\", done: true},\n    {id: 7, content: \"Bronx\", done: false},\n    {id: 8, content: \"Manhattan\", done: true},\n    {id: 9, content: \"Persian\", done: false},\n    {id: 10, content: \"Munchkin\", done: false},\n    {id: 11, content: \"Bengal\", done: true},\n  ])\n  const [columns, setColumns] = useState([\n    {\n      id: 0,\n      title: \"Languages to learn\",\n      tickets: [0, 1, 2, 3]\n    },\n    {\n      id: 1,\n      title: \"Boroughs to explore\",\n      tickets: [4, 5, 6, 7, 8]\n    },\n    {\n      id: 2,\n      title: \"Cats to pet\",\n      tickets: [9, 10, 11]\n    }\n  ])\n    \n  // function DisplayInput (props) {\n  //   const displayInput = props.displayInput\n  //   if (displayInput){\n  //     return <TicketForm />\n  //   } else {\n  //     return null\n  //   }\n  // }\n\n\n  const updatePersistData = (data) => {\n    return\n    localStorage.setItem('myData', JSON.stringify(data))\n  }\n\n  const dragStart = (e) => {\n    e.dataTransfer.setData(\"TicketName\", e.target.id)\n    e.dataTransfer.setData(\"OriginId\", e.target.name)\n    e.dataTransfer.setData(\"TicketId\", e.target.index)\n  }\n  const dragging = (e) => {\n    return\n  }\n  const allowDrop = (e) => { \n    e.preventDefault();\n    // if (e === dropColumn){\n    //   return\n    // }\n    // const originId = e.dataTransfer.getData(\"OriginId\")\n    // if (e.target.getAttribute(\"class\") === \"column\"){\n    //   if (e.target.id !== originId){\n    //     setDropColumn(e)\n    //   } else {\n    //     setDropColumn(false)\n    //   }\n    // }\n  }\n\n  const drop = (e) => {\n    e.preventDefault();\n    console.log(e.target.id)\n    const ticketName = e.dataTransfer.getData(\"TicketName\")\n    const originId = e.dataTransfer.getData(\"OriginId\")\n    const ticketId = () => {\n      for (let c of columns){\n        let colTickets = c.tickets\n        for (let t in colTickets){\n          let curTicket = colTickets[t]\n          if (tickets[curTicket].content === ticketName){\n            return curTicket\n          }\n        }\n      }\n      return null   \n    }\n    const tId = ticketId()\n    if (e.target.getAttribute(\"class\") === \"column\" && e.target.id !== originId){ \n      let newColumns = moveTicket(e.target.id, tId, ticketName, columns)\n      setColumns(newColumns)\n      updatePersistData(newColumns)\n    }\n  }\n\n  const moveTicket = (colId, ticketId, val, columns) => {\n    const newColumns = columns.map((col) => {\n      // removes ticket from origin\n      if (col.tickets.includes(ticketId)){\n        let srcCol = {\n          id: col.id,\n          title: col.title,\n          tickets: col.tickets.filter(x => x != ticketId)\n        }\n        return srcCol\n      }\n      // add ticket to destination\n      if (col.id == colId) {\n        const destCol = {\n          id: col.id,\n          title: col.title, \n          tickets: [...col.tickets, ticketId]\n        }\n        return destCol\n      } else {\n        return col\n      }\n    });\n    return newColumns\n  }\n\n  const addTicket = (id, val, columns, tickets) => {\n    const newTicketId = tickets.length\n    const newTickets = [...tickets, {id: newTicketId, content: val, done: false}]\n    const newColumns = columns.map((col) => {\n      if (col.id === id) {\n        return {\n                id: col.id,\n                title: col.title, \n                tickets: [...col.tickets, newTicketId]\n              }   \n      } else {\n        return col\n      }\n    });\n    return [newColumns, newTickets]\n  }\n\n// deprecated?\n  const removeTicket = (origin, val, state) => {\n    const newColumns = state.map((col) => {\n      if (col.title === origin) {\n        return {\n                title: col.title, \n                tickets: col.tickets.filter((t) => {\n                  return t.content !== val\n                })\n              }   \n      } else {\n        return col\n      }\n    });\n    return newColumns\n  }\n\n  const removeColumn = (title) => {\n    const newColumns = columns.filter((column) => column.title !== title);\n    setColumns(newColumns)\n    updatePersistData(newColumns)\n  }\n\n  class Ticket extends React.Component {\n    constructor(props){\n      super(props)\n      this.state={\n        text: props.text,\n        index: props.index,\n        done: false\n      }\n    }\n\n    toggleDone = () => {\n      this.setState({done: !this.state.done}) \n    }\n\n    render(){\n      return (\n        <div className=\"ticket\"\n             name={this.props.column}\n             id={this.state.text}\n             index={this.state.index}\n             draggable=\"true\"\n             onDragStart={dragStart}\n             onDrag={dragging}\n             style={this.state.done ? { textDecoration: \"line-through\" } : {}} onClick={this.toggleDone}>\n          {\"\\xa0\" + this.state.text} \n        </div>\n      )\n    }\n  }\n\n  class TicketColumn extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {items: props.items, title: props.title, id: props.id}\n    }\n    render(){\n      return (\n        <div className=\"column\"\n             id={this.state.id}\n             onDrop={drop}\n             onDragOver={allowDrop}>\n        <header><b>{\"\\xa0\" + this.state.title}</b></header>\n        <button onClick={() => {removeColumn(this.state.id)}}>X</button>\n        <br/>\n        {this.state.items.map((item, i) => { \n          return <Ticket key={i} column={this.state.id} \n                                 index={item.id} \n                                 done={item.done} \n                                 text={item.content}/>\n        })}\n        <br/>\n        <br/>\n        <br/>\n        <div>^^^Drag here to add!^^^</div>\n        <TicketForm id={this.state.id}/>\n        </div>\n      )\n    }\n  }\n\n  class Workspace extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {columns: props.columns, tickets: props.tickets}\n    }\n    componentDidMount(){\n      const persistedData = JSON.parse(localStorage.getItem('myData' || null))\n      if (persistedData && !isPersist & !isEquivalent(columns, persistedData)){\n        setColumns(persistedData)\n        setIsPersist(true)\n      }\n    }\n    render(){\n      const { columns } = this.props\n      const { tickets } = this.props\n      return(\n        <div className=\"flex-container\">\n        { columns.map((column, i) => {\n            return <TicketColumn key={i} \n                                 items={column.tickets.map((id) => tickets[id])} \n                                 title={column.title} \n                                 id={column.id}/>\n          })\n        }\n        <ColumnForm />\n        </div>\n      )\n    }\n  }\n\n  class TicketForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {value: '', id: props.id}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      if (this.state.value !== \"\"){\n        const res = addTicket(this.state.id, this.state.value, columns, tickets)\n        const newColumns = res[0]\n        const newTickets = res[1]\n        setColumns(newColumns)\n        setTickets(newTickets)\n        updatePersistData(newColumns)\n      } \n      event.preventDefault();\n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"tkt-input\" type=\"text\" placeholder=\"Add new dream :)\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-tkt-btn\"type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n\n  class ColumnForm extends React.Component {\n\n    constructor(props) {\n      super(props)\n      this.state = {id: columns.length, value: ''}\n      this.handleChange = this.handleChange.bind(this)\n      this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event){\n      this.setState({value: event.target.value})\n    }\n\n    handleSubmit(event){\n      if (this.state.value !== \"\"){\n        const newColumns = [...columns, {\n          id: this.state.id,\n          title: this.state.value,\n          tickets: []\n        }]\n        setColumns(newColumns);\n      }\n      event.preventDefault();\n    }\n\n    render() {\n      return (\n        <form className=\"column\" onSubmit={this.handleSubmit}>\n          <label>\n            <input className=\"col-input\" type=\"text\" placeholder=\"Add new dream list\" value={this.state.value} onChange={this.handleChange}/>\n          </label>\n          <input className=\"input-col-btn\" type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n  }\n  return (\n    <div className=\"container\">\n      <header className=\"display-1\" id=\"title\" >Hacker Dreams</header>\n      <p class=\"lead\">Don't let your dreams be dreams, hackers.</p>\n      <Workspace columns={columns} tickets={tickets}/>\n    </div> )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}